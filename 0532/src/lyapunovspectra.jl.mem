        - include("./DDfield.jl")
        - include("./RungeKutta.jl")
        - include("./randominitialcondition.jl")
        - include("./gramschmidt.jl")
        - 
        - 
        - """
        - Solver based on a 4th order Runge-Kutta integrator
        - """
        - function flowRK(field::Function, r0::Vector{Float64},dt::Float64, tfinal::Float64, potential::Function, beta::Float64, Q::Float64)
        - 
 25600000     t = 0.0:dt:tfinal
 70400704     pos = copy(r0)
        - 
 25600256     function extendedfield(r::Vector{Float64})
        -         field(r, potential, beta, Q)
        -     end
        - 
        0     N = length(t) - 1
        0     for i in 1:N
        0         pos = rungeK(pos, extendedfield, dt)
        -     end
        - 
        0     return pos
        - end
        - 
        - """
        - Calculates the whole lyapunov spectrum of the given (variational) field
        - """
        - function lyapunovspectra(field::Function, r::Vector{Float64}, dt::Float64, dtsampling::Float64, nsteps::Int64, potential::Function, beta::Float64, Q::Float64)
     5776     w = eye(3)
  3200320     norm1 = zeros(nsteps)
  3200320     norm2 = zeros(nsteps)
  3200320     norm3 = zeros(nsteps)
        - #    phasespace = zeros(nsteps,3) #If want to store the trajectory of the point
        - 
        0     for i in 1:nsteps
        -  #       phasespace[i,:] = r[1:3]
        0         r = flowRK(field, r, dt, dtsampling, potential, beta, Q) 
        - #        r[1:3] = pos[1:3]
        -         
131533296         u = reshape(r[4:end],3,3)
        -         
        0         w = gramschmidt(u')
        0         norm1[i] = norm(w[:,1])
        0         norm2[i] = norm(w[:,2])
        0         norm3[i] = norm(w[:,3])
        - 
        0         w[:,1] = w[:,1]/norm(w[:,1])
        0         w[:,2] = w[:,2]/norm(w[:,2])
        0         w[:,3] = w[:,3]/norm(w[:,3])
        0         r[4:end] = copy(w'[:])
        - 
        -     end
        - 
  3200320     exp1 = sum(log(norm1))/(nsteps*dtsampling)
137600320     exp2 = sum(log(norm2))/(nsteps*dtsampling)
  3200320     exp3 = sum(log(norm3))/(nsteps*dtsampling)
        - 
        - #    println("Exponentes de Lyapunov: $exp1, $exp2, $exp3")
        - 
      256     return norm1, norm2, norm3, exp1, exp2, exp3
        - 
        - end
        - 
        - 
        - 
        -     
        -     
        -     
        - 
        -     
        - 
