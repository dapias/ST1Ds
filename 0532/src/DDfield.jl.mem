        - using ForwardDiff
        - import ForwardDiff.derivative
        - 
        - 
        - function DDfield(r::Vector{Float64}, potential::Function, beta::Float64, Q::Float64)
        - 
205630352     (q, p, z) = r
        - 
102820368     force(x::Float64) = -derivative(potential,x)
        - 
        -     
        0     dq_dt = p
102809600     dp_dt = force(q) + (1-exp(z - Q))/(1+exp(z-Q))*p/beta
        0     dz_dt = p^2. - 1.0/beta
        - 
925286400     [dq_dt, dp_dt, dz_dt]
        - 
        - end
        0 
        - 
        - function forcederivative(potential::Function)
        0     force(x) = -derivative(potential,x)
102849888     fprime(x) = derivative(force,x)
        - 
        0     return fprime
        - 
        - end
        - 
        - function jacobian(r_and_phi::Vector{Float64}, potential::Function, beta::Float64, Q::Float64)
        - 
205645136     (q,p,z) = r_and_phi[1:3]
        0     
        0     fprime = forcederivative(potential)
        - 
        -     
102809600     J = [0. 1. 0.; fprime(q)  (1-exp(z - Q))/(1+exp(z-Q))/beta p*(-2.0*exp(z-Q))/(1.0+exp(z-Q))^2./beta; 0. 2.0*p 0.]
        - 
        - end
        -     
        -     
        - 
        - function variationalDDfield(r_and_phi::Vector{Float64}, potential::Function, beta::Float64, Q::Float64)
        - 
        0     r = DDfield(r_and_phi[1:3], potential, beta, Q)
        - 
        0     J = jacobian(r_and_phi, potential, beta, Q)
        -    
        0     rmatrix = reshape(r_and_phi[4:end],3,3)
1234281248     DPhi = J*rmatrix'
        -     
        - 
2981493744     return append!(r, DPhi'[:])
        - 
        - end    
        - 
